[alias]
    ba = branch --all -vv
    bl = branch -vv
    bp = !git branch --merged | grep -v "\\*" | xargs -n 1 git branch -d
    bps = "!f() { local targetBranch=${1:-develop}; git checkout -q $targetBranch && git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base $targetBranch $branch) && [[ $(git cherry $targetBranch $(git commit-tree $(git rev-parse \"$branch^{tree}\") -p $mergeBase -m _)) == \"-\"* ]] && git branch -D $branch; done;}; f"
    cv = commit --verbose
    df = diff --patience
    dfc = !git df --cached
    dw = diff --color-words --patience
    dwc = !git dw --cached
    fa = fetch --all --prune --tags --verbose
    gr = "!f() { cd ${GIT_PREFIX:-.}; git grep -l $1 | xargs sed -i s/$1/$2/g; }; f"
    lgg = !git lsr | grep
    lggl = !git lls | grep
    lgr = log --pretty=format:'%C(bold blue)%h%C(reset)%C(yellow) - %C(white)(%ad)%C(reset) %Cred%d %C(bold white)%s%C(reset) %C(white)— %an' --abbrev-commit --decorate --date=relative --graph --all
    lgs = log --pretty=format:'%C(bold blue)%h%C(reset)%C(yellow) - %C(white)(%ad)%C(reset) %Cred%d %C(bold white)%s%C(reset) %C(white)— %an' --abbrev-commit --decorate --date=short --graph --all
    llr = log --pretty=format:'%C(bold blue)%H%C(reset)%C(yellow) - %C(white)(%ad)%C(reset) %Cred%d %C(bold white)%s%C(reset) %C(white)— %an' --decorate --numstat --date=relative
    lls = log --pretty=format:'%C(bold blue)%H%C(reset)%C(yellow) - %C(white)(%ad)%C(reset) %Cred%d %C(bold white)%s%C(reset) %C(white)— %an' --decorate --numstat --date=short
    lsf = ls-files
    lsr = log --pretty=format:'%C(bold blue)%h%C(reset)%C(yellow) - %C(white)(%ad)%C(reset) %Cred%d %C(bold white)%s%C(reset) %C(white)— %an' --abbrev-commit --decorate --date=relative
    lss = log --pretty=format:'%C(bold blue)%h%C(reset)%C(yellow) - %C(white)(%ad)%C(reset) %Cred%d %C(bold white)%s%C(reset) %C(white)— %an' --abbrev-commit --decorate --date=short
    lsi = log --pretty=format:'%C(bold blue)%h%C(reset)%C(yellow) - %C(white)(%ad)%C(reset) %Cred%d %C(bold white)%s%C(reset) %C(white)— %an' --abbrev-commit --decorate --date=iso
    mnc = merge --no-commit
    praise = blame -w -C -C -C
    rb = rebase -i @{u}
    rba = rebase --abort
    rbc = rebase --continue
    rbs = rebase --skip
    ss = status -sb
    unstage = reset HEAD
    update-submodules = !git pull --recurse-submodules && git submodule update
[branch]
    autosetuprebase = always
[branch "master"]
    rebase = true
[color]
    branch = auto
    diff = auto
    status = auto
    interactive = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    whitespace = red reverse
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[core]
    excludesfile = ~/.gitignore_global
[credential]
    helper = cache
[gist]
    private = no
[github]
    user = Raytray
[fetch]
    recurseSubmodules = true
[merge]
    tool = emerge
[pull]
    rebase = true
[push]
    default = simple
[user]
    name = Raymond Tang
[safe]
	directory = *
[init]
	defaultBranch = main
[rerere]
	enabled = true
